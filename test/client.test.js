"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
var fs = require("fs");
var chai_importer_test_1 = require("./chai-importer.test");
var _ = require("lodash");
var path = require("upath");
var cleanStack = require("clean-stacktrace");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var rimraf = require("rimraf");
var client_1 = require("../lib/client");
var ftpClient;
var cleanError = function (err) {
    var out = cleanStack(err.stack, function (line) {
        var m = /(node_modules)/.exec(line) || [];
        if (m[1]) {
            return null;
        }
        return line;
    });
    return _.assign(err, { stack: out.replace(/^[\r\n]{2,}/gm, '') });
};
var serverFTPTest = {
    host: 'ftp.dlptest.com',
    port: 21,
    user: 'dlpuser@dlptest.com',
    password: '3D6XZV9MKdhM5fF',
    debug: function (msg) {
        // console.log('\t\tFTP --> ' + msg);
    },
};
var options = {
    logging: 'debug',
};
ftpClient = new client_1.Client(serverFTPTest, options);
describe('Test connection', function () {
    it("connect to the test server", function (done) {
        var connected = false;
        ftpClient.connect().subscribe(function () { return connected = true; }, function (err) { return done(err); }, function () {
            chai_importer_test_1.expect(connected).to.be.true;
            chai_importer_test_1.expect(ftpClient.status).to.be.equal('connected');
            done();
        });
    });
    it("disconnect from the test server", function (done) {
        var connected = true;
        ftpClient.disconnect().subscribe(function () { return connected = false; }, function (err) { return done(err); }, function () {
            chai_importer_test_1.expect(connected).to.be.false;
            chai_importer_test_1.expect(ftpClient.status).to.be.equal('disconnected');
            done();
        });
    });
});
describe('Test upload', function () {
    var testFiles = [
        './test.txt',
        './dir',
        './dir/*',
    ];
    var remotePath = '/test';
    beforeEach(function (done) {
        this.timeout(0);
        ftpClient.connect().subscribe({
            error: function (err) { return done(err); },
            complete: function () { return done(); },
        });
    });
    afterEach(function (done) {
        this.timeout(0);
        ftpClient.connect().pipe(operators_1.switchMapTo(ftpClient.deleteRemoteFile({
            src: remotePath,
            isDirectory: function () { return true; },
        })), operators_1.switchMapTo(ftpClient.disconnect())).subscribe({
            error: function (err) { return done(err); },
            complete: function () { return done(); },
        });
    });
    it("upload one file to the test server", function (done) {
        ftpClient.upload(path.join(__dirname, testFiles[0]), remotePath, { baseDir: __dirname }).subscribe(function (results) {
            chai_importer_test_1.expect(results, 'No results returned').to.exist;
            chai_importer_test_1.expect(results.uploadedFiles).to.be.eql([
                path.join(__dirname, testFiles[0]),
            ]);
            chai_importer_test_1.expect(results.uploadedDirs).to.be.empty;
            chai_importer_test_1.expect(results.errors, 'Errors detected').to.be.empty;
        }, function (err) { return done(err); }, function () {
            chai_importer_test_1.expect(ftpClient.status).to.be.equal('disconnected');
            done();
        });
    }).timeout(20000);
    it("upload multiple files to the test server", function (done) {
        ftpClient.upload(_.map(testFiles, function (t) { return path.join(__dirname, t); }), remotePath, { baseDir: __dirname }).subscribe(function (results) {
            chai_importer_test_1.expect(results, 'No results returned').to.exist;
            chai_importer_test_1.expect(results.uploadedFiles).to.be.length(3);
            chai_importer_test_1.expect(results.uploadedDirs).to.be.length(1);
            chai_importer_test_1.expect(results.errors, 'Errors detected').to.be.empty;
        }, function (err) { return done(err); }, function () {
            chai_importer_test_1.expect(ftpClient.status).to.be.equal('disconnected');
            done();
        });
    }).timeout(20000);
});
describe.only('Test download', function () {
    var testFiles = [
        './test.txt',
        './dir',
        './dir/*',
    ];
    var remotePath = '/test';
    var downloadPath = '/download';
    beforeEach(function (done) {
        this.timeout(0);
        ftpClient.setConfig(serverFTPTest, _.assign(_.clone(options), {
            logging: 'none',
            baseDir: __dirname,
        }));
        ftpClient.connect().pipe(operators_1.tap(function () { return console.info('Before - Uploading test files'); }), operators_1.switchMapTo(ftpClient.upload(_.map(testFiles, function (t) { return path.join(__dirname, t); }), remotePath)), operators_1.tap(function () { return console.info('Before - Files uploaded, creating folder '
            + downloadPath); }), operators_1.switchMapTo(rxjs_1.bindNodeCallback(fs.mkdir).call(this, path.join(__dirname, downloadPath)).pipe(operators_1.catchError(function (err) {
            if (err.code === 'EEXIST') {
                return rxjs_1.of(null);
            }
            return rxjs_1.throwError(err);
        }))), operators_1.tap(function () { return console.info('Before - Done'); }), operators_1.tap(function () {
            console.info('Before - Set new config'),
                ftpClient.setConfig(_.assign(_.clone(serverFTPTest), {
                    logging: 'debug',
                    debug: function (msg) {
                        // console.log('\t\tFTP --> ' + msg);
                    },
                }), _.assign(_.clone(options), {}));
        }), operators_1.switchMapTo(ftpClient.connect()), operators_1.catchError(function (err) {
            ftpClient.setConfig(serverFTPTest, options);
            return rxjs_1.throwError(err);
        })).subscribe({
            error: function (err) { return done(err); },
            complete: function () { return done(); },
        });
    });
    afterEach(function (done) {
        this.timeout(0);
        ftpClient.setConfig(serverFTPTest, _.assign(_.clone(options), {
            logging: 'none',
        }));
        var endObservable = rxjs_1.of(null).pipe(operators_1.tap(function () {
            ftpClient.setConfig(serverFTPTest, options);
        }), operators_1.ignoreElements());
        ftpClient.connect().pipe(operators_1.tap(function () { return console.info('After - Disconnecting and cleaning folders'); }), operators_1.switchMapTo(ftpClient.deleteRemoteFile({
            src: remotePath,
            isDirectory: function () { return true; },
        })), operators_1.switchMapTo(rxjs_1.bindNodeCallback(rimraf).call(this, path.join(__dirname, downloadPath))), operators_1.switchMapTo(ftpClient.disconnect()), operators_1.tap(function () { return console.info('After - Done'); }), operators_1.concat(endObservable), operators_1.catchError(function (err) {
            return endObservable.pipe(operators_1.mapTo(rxjs_1.throwError(err)));
        })).subscribe({
            error: function (err) { return done(err); },
            complete: function () { return done(); },
        });
    });
    it("Download a folder from the test server", function (done) {
        var localFilePath = path.join(__dirname, downloadPath, testFiles[0]);
        ftpClient.download(remotePath, path.join(__dirname, downloadPath)).pipe(operators_1.catchError(function (err) {
            return ftpClient.disconnect().pipe(operators_1.switchMapTo(rxjs_1.throwError(err)));
        }))
            .subscribe(function (results) {
            chai_importer_test_1.expect(results, 'No results returned').to.exist;
            chai_importer_test_1.expect(results.downloadedFiles).to.be.length(3);
            chai_importer_test_1.expect(results.errors, 'Errors detected').to.be.empty;
            chai_importer_test_1.expect(chai_importer_test_1.file(path.join(localFilePath))).to.exist;
        }, function (err) { return done(err); }, function () {
            chai_importer_test_1.expect(ftpClient.status).to.be.equal('disconnected');
            done();
        });
    }).timeout(20000);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
